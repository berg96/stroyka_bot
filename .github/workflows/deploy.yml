name: Deploy to Yandex Cloud VM

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/stroyka-bot:latest
  REMOTE_DIR: /home/${{ secrets.VM_USER }}/stroyka-bot

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install & configure Yandex Cloud CLI
        run: |
          # 1) Инжектим ключ сервисного аккаунта
          echo "${{ secrets.YC_SA_KEY }}" > key.json

          # 2) Скачиваем официальный архив yc и распаковываем в /usr/local/bin
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/latest/linux/amd64/yandex-cloud-cli-latest-linux-amd64.tar.gz \
            | sudo tar -xz -C /usr/local/bin yc

          sudo chmod +x /usr/local/bin/yc

          # 3) Проверяем доступность
          yc --version

          # 4) Настраиваем CLI
          yc config set service-account-key key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

      - name: Docker login to Yandex Container Registry
        run: |
          yc container registry configure-docker

      - name: Build & push Docker image
        run: |
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Create .env from secret
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.VM_SSH_KEY }}" > deploy_key
          chmod 600 deploy_key

      - name: Copy files to VM
        run: |
          scp -o StrictHostKeyChecking=no -i deploy_key \
            .env docker-compose.yml \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:$REMOTE_DIR

      - name: SSH and restart bot
        run: |
          ssh -o StrictHostKeyChecking=no -i deploy_key \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
              cd $REMOTE_DIR
              docker-compose pull
              docker-compose up -d --remove-orphans
            EOF

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to:    ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            В ${{ github.repository }}
            ${{ github.actor }} запушил коммит
            "${{ github.event.commits[0].message }}"
            Деплой stroyka_bot выполнен!
